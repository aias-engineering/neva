// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NeVa.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Validate instance")]
    public partial class ValidateInstanceFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Validate instance.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Validate instance", @"The core funcionality of neva.

Neva provides a toolset in the following structure:

Tool { name: ""NotNull""
	     execute: x => x != null }

Using the tools defined in the basic toolset, the user of neva may define
Rulesets for his domain.

Ruleset { target: ""Ninja""
		    memberRules : [ 
				Rule { member: ""Name""
					   shouldbe: [ ""NotNull"" ] } ] }

A neva instance initialized with such a ruleset is capable to validate
if a given Ninja has a name set.

The fully initialized neva instance will validate a provided item and return
a report.

Report { target = ""Ninja""
		 hasFailed = true
		 members = [ 
			Member { name = ""Name"" 
					 message = [""NotNull""] } ] }", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate name of ninja not null")]
        public virtual void ValidateNameOfNinjaNotNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate name of ninja not null", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Member",
                        "Should be"});
            table1.AddRow(new string[] {
                        "Name",
                        "NotNull"});
#line 31
  testRunner.Given("the ruleset NinjaNameNotNull with the following member rules", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Ruleset"});
            table2.AddRow(new string[] {
                        "NinjaNameNotNull"});
#line 34
    testRunner.And("neva is initialized with the following rulesets", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table3.AddRow(new string[] {
                        ""});
#line 37
  testRunner.When("neva validates the following ninja receiving the report NinjaReport", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Failed"});
            table4.AddRow(new string[] {
                        "Ninja",
                        "true"});
#line 40
  testRunner.Then("the report NinjaReport should have the following properties", ((string)(null)), table4, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Member",
                        "Message"});
            table5.AddRow(new string[] {
                        "Name",
                        "IsNull"});
#line 43
    testRunner.And("the repoert NinjaReport should contain the following member reports", ((string)(null)), table5, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
